name: Build Project111


on:

 
  push:
    tags:
        - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-and-test:
    runs-on: windows-latest
#     runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
         ref: dev
          
#       - name: Set up Python
#         uses: actions/setup-python@v1
#         with:
#           python-version: '3.x'

#       - name: Setup .NET Framework
#         uses: actions/setup-dotnet@v1
#         with:
#           dotnet-version: 5.0.x

#       - name: Restore NuGet Packages
#         run: |
#           cd ParserGUI
#           nuget restore
        
#      - name: Build Solution
#         run: |
#           (Get-Item .).FullName
#           Get-ChildItem
#           cd ParserGUI
#           (Get-Item .).FullName
#           Get-ChildItem
#           $env:Path += ";C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\bin"
#           msbuild /p:Configuration=Release ParserGUI.sln
#           Get-ChildItem -Verbose
#           Get-ChildItem -Verbose
#           echo "Git tag added in env!========================"
#           echo $env:OUR_TAG

#       - name: Install python script
#         id: py_script
#         env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#         run: |
#           gci
          
#           python -m venv ./venv
#           .\venv\Scripts\Activate.ps1
#           pip install gitpython
#           pip install PyGithub
#           python -m pip install --upgrade pip
#           cd ParserGUI
          

          
#           $tag_name = $(python -c "
#           import git

#           repo = git.Repo(search_parent_directories=True)
#           tags = sorted(repo.tags, key=lambda t: t.commit.committed_datetime)

#           if tags:
#               latest_tag = str(tags[-1])
#           else:
#               latest_tag = 'v1.0.0'

#           latest_tag = latest_tag[1:] if latest_tag.startswith('v') else latest_tag
#           major, minor, patch = map(int, latest_tag.split('.'))
#           patch += 1
#           new_tag = '.'.join(map(str, [major, minor, patch]))
#           # Создание экземпляра объекта GitHub с использованием токена доступа
#           g = Github(os.getenv('GITHUB_TOKEN'))

#           # Получение репозитория, в котором вы хотите создать релиз
#           repo_name = 'moevm/MSE-2023-msm-doc_parser-18'
#           repo = g.get_repo(repo_name)

#           # Создание релиза с новым тегом
#           release = repo.create_git_release(
#               tag=new_tag,  # Новый тег релиза
#               name='Release Name',  # Название релиза
#               message='Release Description',  # Описание релиза
#               draft=False,  # Установите значение True, если вы хотите создать черновик релиза
#               prerelease=False  # Установите значение True, если это предварительный релиз
#           )

#           print(f'Релиз успешно создан: {release.html_url}')
#           print(new_tag)
#           ")

#           echo "Git tag added in env!"
#           echo $tag_name >> "$GITHUB_OUTPUT"
        
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
       
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           tag_name:  ${{ steps.py_script.outputs.tag_name }}
#           release_name: Release ${{ github.ref }}
#           body: |
#             "Build info: Version: ${{ steps.py_script.outputs.tag_name }} ${steps.py_script.outputs.tag_name }}, from commit SHA: ${{ github.sha }}"
#             Changes in this Release
#             - First Change
#             - Second Change
#           draft: false
#           prerelease: false
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Get the version
        id: get_version
        run: |
          $latestTag = git rev-list --tags --max-count=1 | foreach { git describe --tags $_ }
          echo "VERSION=$latestTag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
